/* LTTng tracepoint provider for llserver */

#undef TRACEPOINT_PROVIDER
#define TRACEPOINT_PROVIDER llserver

/* This tells the second pass how to re-include this file */
#undef TRACEPOINT_INCLUDE
#define TRACEPOINT_INCLUDE "./tracepoint.tp"

#if !defined(LLSERVER_TRACEPOINT_TP_H) || defined(TRACEPOINT_HEADER_MULTI_READ)
#define LLSERVER_TRACEPOINT_TP_H

#include <lttng/tracepoint.h>
#include <stdint.h>

/* packet_received: Immediately after enqueue by producer */
TRACEPOINT_EVENT(
    llserver,
    packet_received,
    TP_ARGS(
        uint64_t, seqno,
        uint32_t, size_bytes,
        uint32_t, queue_size,
        uint64_t, t_produced_ns
    ),
    TP_FIELDS(
        ctf_integer(uint64_t, seqno, seqno)
        ctf_integer(uint32_t, size_bytes, size_bytes)
        ctf_integer(uint32_t, queue_size, queue_size)
        ctf_integer(uint64_t, t_produced_ns, t_produced_ns)
    )
)

/* process_start: After dequeue, before processing */
TRACEPOINT_EVENT(
    llserver,
    process_start,
    TP_ARGS(
        uint64_t, seqno,
        uint64_t, queue_delay_ns,
        uint32_t, queue_size,
        uint64_t, t_start_ns
    ),
    TP_FIELDS(
        ctf_integer(uint64_t, seqno, seqno)
        ctf_integer(uint64_t, queue_delay_ns, queue_delay_ns)
        ctf_integer(uint32_t, queue_size, queue_size)
        ctf_integer(uint64_t, t_start_ns, t_start_ns)
    )
)

/* process_end: After processing completes */
TRACEPOINT_EVENT(
    llserver,
    process_end,
    TP_ARGS(
        uint64_t, seqno,
        uint64_t, processing_ns,
        uint64_t, t_end_ns,
        uint8_t,  success
    ),
    TP_FIELDS(
        ctf_integer(uint64_t, seqno, seqno)
        ctf_integer(uint64_t, processing_ns, processing_ns)
        ctf_integer(uint64_t, t_end_ns, t_end_ns)
        ctf_integer(uint8_t, success, success)
    )
)

/* lock_wait: Right after acquiring a mutex if waited > 0 */
TRACEPOINT_EVENT(
    llserver,
    lock_wait,
    TP_ARGS(
        const char*, mutex_name,
        uint64_t,    wait_ns
    ),
    TP_FIELDS(
        ctf_string(mutex_name, mutex_name)
        ctf_integer(uint64_t, wait_ns, wait_ns)
    )
)

/* lock_hold: Just before unlocking */
TRACEPOINT_EVENT(
    llserver,
    lock_hold,
    TP_ARGS(
        const char*, mutex_name,
        uint64_t,    hold_ns
    ),
    TP_FIELDS(
        ctf_string(mutex_name, mutex_name)
        ctf_integer(uint64_t, hold_ns, hold_ns)
    )
)

/* logging_io: After each blocking log I/O or flush/rotate */
TRACEPOINT_EVENT(
    llserver,
    logging_io,
    TP_ARGS(
        uint32_t, bytes,
        uint64_t, io_ns,
        uint8_t,  op
    ),
    TP_FIELDS(
        ctf_integer(uint32_t, bytes, bytes)
        ctf_integer(uint64_t, io_ns, io_ns)
        ctf_integer(uint8_t, op, op)
    )
)

/* logging_io_error: On I/O error capturing errno */
TRACEPOINT_EVENT(
    llserver,
    logging_io_error,
    TP_ARGS(
        uint32_t, attempted_bytes,
        uint64_t, io_ns,
        uint8_t,  op,
        int32_t,  err_no
    ),
    TP_FIELDS(
        ctf_integer(uint32_t, attempted_bytes, attempted_bytes)
        ctf_integer(uint64_t, io_ns, io_ns)
        ctf_integer(uint8_t, op, op)
        ctf_integer(int32_t, err_no, err_no)
    )
)

/* queue_snapshot: Periodic (e.g. 1 Hz) */
TRACEPOINT_EVENT(
    llserver,
    queue_snapshot,
    TP_ARGS(
        uint32_t, queue_size,
        uint64_t, produced_total,
        uint64_t, consumed_total,
        uint64_t, dropped_total,
        uint64_t, t_snapshot_ns
    ),
    TP_FIELDS(
        ctf_integer(uint32_t, queue_size, queue_size)
        ctf_integer(uint64_t, produced_total, produced_total)
        ctf_integer(uint64_t, consumed_total, consumed_total)
        ctf_integer(uint64_t, dropped_total, dropped_total)
        ctf_integer(uint64_t, t_snapshot_ns, t_snapshot_ns)
    )
)

/* backlog_trigger: Once per backlog episode detection */
TRACEPOINT_EVENT(
    llserver,
    backlog_trigger,
    TP_ARGS(
        uint32_t, queue_size,
        int64_t,  growth_rate_per_sec,
        uint8_t,  reason_code,
        uint64_t, t_trigger_ns
    ),
    TP_FIELDS(
        ctf_integer(uint32_t, queue_size, queue_size)
        ctf_integer(int64_t, growth_rate_per_sec, growth_rate_per_sec)
        ctf_integer(uint8_t, reason_code, reason_code)
        ctf_integer(uint64_t, t_trigger_ns, t_trigger_ns)
    )
)

/* item_dropped: When dropping workload (if implemented) */
TRACEPOINT_EVENT(
    llserver,
    item_dropped,
    TP_ARGS(
        uint64_t, seqno,
        uint32_t, queue_size,
        uint8_t,  cause
    ),
    TP_FIELDS(
        ctf_integer(uint64_t, seqno, seqno)
        ctf_integer(uint32_t, queue_size, queue_size)
        ctf_integer(uint8_t, cause, cause)
    )
)

/* thread_heartbeat: Every 5â€“10s per critical thread */
TRACEPOINT_EVENT(
    llserver,
    thread_heartbeat,
    TP_ARGS(
        uint8_t,  thread_role,
        uint64_t, t_beat_ns
    ),
    TP_FIELDS(
        ctf_integer(uint8_t, thread_role, thread_role)
        ctf_integer(uint64_t, t_beat_ns, t_beat_ns)
    )
)

/* network send: On successful send operation */
TRACEPOINT_EVENT(
    llserver,
    net_send,
    TP_ARGS(
        uint32_t, bytes,
        uint64_t, io_ns
    ),
    TP_FIELDS(
        ctf_integer(uint32_t, bytes, bytes)
        ctf_integer(uint64_t, io_ns, io_ns)
    )
)

/* network send error: On send error capturing errno */
TRACEPOINT_EVENT(
    llserver,
    net_send_error,
    TP_ARGS(
        uint32_t, attempted_bytes,
        uint64_t, io_ns,
        int32_t,  err_no
    ),
    TP_FIELDS(
        ctf_integer(uint32_t, attempted_bytes, attempted_bytes)
        ctf_integer(uint64_t, io_ns, io_ns)
        ctf_integer(int32_t, err_no, err_no)
    )
)

/* network send header: On successful header send operation */
TRACEPOINT_EVENT(
    llserver,
    net_send_header,
    TP_ARGS(
        uint32_t, bytes,
        uint64_t, io_ns
    ),
    TP_FIELDS(
        ctf_integer(uint32_t, bytes, bytes)
        ctf_integer(uint64_t, io_ns, io_ns)
    )
)

/* network send header error: On header send error capturing errno */
TRACEPOINT_EVENT(
    llserver,
    net_send_header_error,
    TP_ARGS(
        uint32_t, attempted_bytes,
        uint64_t, io_ns,
        int32_t,  err_no
    ),
    TP_FIELDS(
        ctf_integer(uint32_t, attempted_bytes, attempted_bytes)
        ctf_integer(uint64_t, io_ns, io_ns)
        ctf_integer(int32_t, err_no, err_no)
    )
)

/* network send body: On successful body send operation */
TRACEPOINT_EVENT(
    llserver,
    net_send_body,
    TP_ARGS(
        uint32_t, bytes,
        uint64_t, io_ns
    ),
    TP_FIELDS(
        ctf_integer(uint32_t, bytes, bytes)
        ctf_integer(uint64_t, io_ns, io_ns)
    )
)

/* network send body error: On body send error capturing errno */
TRACEPOINT_EVENT(
    llserver,
    net_send_body_error,
    TP_ARGS(
        uint32_t, attempted_bytes,
        uint64_t, io_ns,
        int32_t,  err_no
    ),
    TP_FIELDS(
        ctf_integer(uint32_t, attempted_bytes, attempted_bytes)
        ctf_integer(uint64_t, io_ns, io_ns)
        ctf_integer(int32_t, err_no, err_no)
    )
)

/* network receive: On successful receive operation */
TRACEPOINT_EVENT(
    llserver,
    net_recv,
    TP_ARGS(
        uint32_t, bytes,
        uint64_t, io_ns
    ),
    TP_FIELDS(
        ctf_integer(uint32_t, bytes, bytes)
        ctf_integer(uint64_t, io_ns, io_ns)
    )
)

/* network receive error: On receive error capturing errno */
TRACEPOINT_EVENT(
    llserver,
    net_recv_error,
    TP_ARGS(
        uint32_t, attempted_bytes,
        uint64_t, io_ns,
        int32_t,  err_no
    ),
    TP_FIELDS(
        ctf_integer(uint32_t, attempted_bytes, attempted_bytes)
        ctf_integer(uint64_t, io_ns, io_ns)
        ctf_integer(int32_t, err_no, err_no)
    )
)

/* writer join threads: Before waiting for writer threads to finish */
TRACEPOINT_EVENT(
    llserver,
    writer_join_threads,
    TP_ARGS(
        uint32_t, thread_count
    ),
    TP_FIELDS(
        ctf_integer(uint32_t, thread_count, thread_count)
    )
)

/* writer thread join: After a writer thread has been joined */
TRACEPOINT_EVENT(
    llserver,
    writer_thread_join,
    TP_ARGS(
        uint64_t, join_ns
    ),
    TP_FIELDS(
        ctf_integer(uint64_t, join_ns, join_ns)
    )
)

#endif /* LLSERVER_TRACEPOINT_TP_H */

/* Second pass: expands to provider object + metadata */
#include <lttng/tracepoint-event.h>